import logging
import os
from telegram.ext import Application, CommandHandler, ContextTypes
import requests

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ["BOT_TOKEN"]

# üîê –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö Telegram ID (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
ALLOWED_USERS = set(map(int, os.environ.get("ALLOWED_USER_IDS", "").split(","))) if os.environ.get("ALLOWED_USER_IDS") else None

# üîó –°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∞–π—Å—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∏ ‚Äî –∑–∞–º–µ–Ω–∏–º –ø–æ–∑–∂–µ)
PRICE_OPT_URL = os.environ.get("PRICE_OPT_URL", "https://example.com/opt.xlsx")
PRICE_RETAIL_URL = os.environ.get("PRICE_RETAIL_URL", "https://example.com/retail.xlsx")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/opt ‚Äî –ø—Ä–∞–π—Å –æ–ø—Ç\n"
        "/retail ‚Äî –ø—Ä–∞–π—Å —Ä–æ–∑–Ω–∏—Ü–∞"
    )

async def check_access(update: Update):
    if ALLOWED_USERS and update.effective_user.id not in ALLOWED_USERS:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return False
    return True

async def send_price(update: Update, url: str, name: str):
    try:
        resp = requests.get(url, timeout=20)
        resp.raise_for_status()
        await update.message.reply_document(
            document=resp.content,
            filename=f"{name}.xlsx"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {name}: {e}")
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–π—Å '{name}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def opt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update):
        return
    await send_price(update, PRICE_OPT_URL, "–ü—Ä–∞–π—Å_–æ–ø—Ç")

async def retail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await check_access(update):
        return
    await send_price(update, PRICE_RETAIL_URL, "–ü—Ä–∞–π—Å_—Ä–æ–∑–Ω–∏—Ü–∞")

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("opt", opt))
    app.add_handler(CommandHandler("retail", retail))
    app.run_polling()

if __name__ == "__main__":
    main()
